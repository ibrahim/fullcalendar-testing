{"version":3,"sources":["components/Appointments/AlertMsg.js","store/createStore.js","components/Appointments/store.js","store/withHooks.js","components/Appointments/Appointments.js","components/Appointments/utils/prepareEvents.js","components/Appointments/Calendar.js","components/Appointments/Api.js","components/Appointments/SlotsTable.js","components/Appointments/index.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","marginBottom","spacing","width","marginTop","AlertMsg","props","msg","React","useState","open","setOpen","classes","className","Collapse","in","Alert","severity","action","IconButton","aria-label","color","size","onClick","fontSize","message","createStore","reducer","initialState","StoreContext","createContext","store","state","setState","useMemo","useMemoizedStore","Provider","value","children","useContext","MESSAGES","setSlots","slots","produce","draft","getUpcomingSlot","getSlots","addAppointment","event","appointments","addAppointmentValidation","slot","dateStr","hasAppointment","find","slotId","id","date","moment","startTime","format","isBetween","start","end","undefined","removeAppointment","newAppointments","filter","a","getAppointments","upcomingSlot","colors","blue","yellow","orange","AppointmentsStoreProvider","useAppointmentsStore","withHooks","mapHooksToProps","WrappedComponent","hookProps","actions","flexGrow","padding","close","slotEvents","Array","isPending","setPending","showConfirmation","setConfirmation","selectedEvent","setSelectedEvent","appointmentEvents","setAppointmentEvents","currentView","setCurrentView","calendarRef","setAlert","isEmpty","events","view","map","title","endTime","display","groupId","extendedProps","eventType","prepareAppointmentEvents","reset","hideAlert","style","height","ref","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","initialView","initialDate","eventSources","dateClick","info","type","calendarApi","current","getApi","calendar","zoomTo","Date","console","log","errors","add","slotTimeDuration","addEvent","uuid","backgroundColor","allDay","constraint","startEditable","durationEditable","resizeableFromStart","handleTimeClick","e","error","eventClick","el","borderColor","eventAdd","eventDrop","startStr","isBefore","revert","viewDidMount","Grid","container","justify","item","Button","variant","disabled","remove","body","modal","alignItems","justifyContent","scheduled","paper","palette","background","border","boxShadow","shadows","ModalCalendar","appointment","handleClose","edge","Modal","aria-labelledby","aria-describedby","onClose","BackdropComponent","Backdrop","BackdropProps","timeout","Cell","withStyles","font","head","primary","main","common","white","TableCell","table","maxWidth","margin","isNull","Promise","resolve","then","res","isAfter","startOf","prepareSlotEvents","TableContainer","component","Paper","Table","TableHead","TableRow","align","TableBody","index","scope","AppointmentsContainer","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"scAOMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,aAAcF,EAAMG,QAAQ,GAC5BC,MAAO,OACP,YAAa,CACXC,UAAWL,EAAMG,QAAQ,SAKhB,SAASG,EAASC,GAAQ,IAC/BC,EAAQD,EAARC,IAD8B,EAEdC,IAAMC,UAAS,GAFD,mBAE/BC,EAF+B,KAEzBC,EAFyB,KAGhCC,EAAUf,IAEhB,OACE,qBAAKgB,UAAWD,EAAQZ,KAAxB,SACE,cAACc,EAAA,EAAD,CAAUC,GAAIL,EAAd,SACE,cAACM,EAAA,EAAD,CACHC,SAAWV,EAAIU,SACVC,OACE,cAACC,EAAA,EAAD,CACEC,aAAW,QACXC,MAAM,UACNC,KAAK,QACLC,QAAS,WACPZ,GAAQ,IALZ,SAQE,cAAC,IAAD,CAAWa,SAAS,cAX1B,SAeDjB,EAAIkB,c,YCVIC,EAnBK,SAACC,EAASC,GAC5B,IAAMC,EAAeC,0BAerB,MAAO,CAbe,SAAAxB,GACpB,IAAIyB,EAbiB,SAACJ,EAASC,GAAkB,IAAD,EAC1BnB,mBAASmB,GADiB,mBAC7CI,EAD6C,KACtCC,EADsC,KAElD,OAAOC,mBAAQ,kBAAMP,EAAQ,CAAEK,QAAOC,eAAa,CACjDD,EACAC,EACAN,IAQYQ,CAAiBR,EAASC,GACtC,OACE,cAACC,EAAaO,SAAd,CAAuBC,MAAON,EAA9B,SACGzB,EAAMgC,YAKE,WACb,OAAOC,qBAAWV,M,QChBTW,EACa,oDADbA,EAEyB,wD,EAwFkBd,GAxErC,SAAC,GAAyB,IAAvBM,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SA6D5B,MAAO,CACNQ,SA7DgB,SAACC,GACjBT,EACCU,aAAQ,SAACC,GACRA,EAAMF,MAAQA,OA2DhBG,gBAJuB,kBAAMb,EAAMU,MAAM,IAKzCI,SANgB,kBAAMd,EAAMU,OAO5BK,eAxDsB,SAACC,GACvBf,EACCU,aAAQ,SAACC,GACRA,EAAMK,aAAN,sBAAyBL,EAAMK,cAA/B,CAA6CD,SAsD/CE,yBAzCgC,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,QACxC,IAAKD,EACJ,MAAO,CAAElC,SAAU,UAAWQ,QAAS,4BAIxC,IAAM4B,EACLrB,EAAMiB,cAAgBjB,EAAMiB,aAAaK,MAAK,SAACN,GAAD,OAAWA,EAAMO,SAAWJ,EAAKK,MAEhF,GAAIH,EAAgB,CACnB,IAAMI,EAAOC,IAAOL,EAAeM,WAAWC,OAAO,eAC/CD,EAAYD,IAAOL,EAAeM,WAAWC,OAAO,SAC1D,MAAQ,CACP3C,SAAU,OACVQ,QAAQ,GAAD,OAAKe,EAAL,eAAwDiB,EAAxD,eAAmEE,IAU5E,OAPuBD,IAAON,GAASS,UACtCH,IAAOP,EAAKW,OACZJ,IAAOP,EAAKY,UACZC,EACA,WAGD,EACQ,CACN/C,SAAU,UACVQ,QAASe,IAeXyB,kBAnDyB,SAACjB,GAC1Bf,EACCU,aAAQ,SAACC,GACR,IAAMsB,EAAkBtB,EAAMK,aAAakB,QAAO,SAAAC,GAAC,OAAIA,EAAEZ,KAAOR,EAAMQ,MACtEZ,EAAMK,aAAeiB,OAgDvBG,gBAXuB,kBAAMrC,EAAMiB,iBAhEhB,CACpBP,MAAO,KACP4B,aAAc,KACdrB,aAAc,GACdsB,OAVsB,CACrBC,KAR4B,UAS5BC,OAX8B,OAY9BC,OAX8B,a,mBA6F3BC,E,KAA2BC,E,aCzFjBC,EAPG,SAAAC,GAAe,OAAI,SAAAC,GACnC,OAAO,SAAAzE,GACL,IAAI0E,EAAYF,EAAgBxE,GAChC,OAAO,cAACyE,EAAD,2BAAsBC,GAAe1E,OCa1CT,EAAYC,aAAW,SAACC,GAAD,MAAY,CACxCkF,QAAS,CACRC,SAAU,EACVC,QAAS,QA+PX,IAkBeN,KAlBS,SAACvE,GAAW,IAAD,EAO9BsE,IALHL,EAFiC,EAEjCA,OACAF,EAHiC,EAGjCA,gBACAJ,EAJiC,EAIjCA,kBACAlB,EALiC,EAKjCA,eACAG,EANiC,EAMjCA,yBAGD,MAAO,CACNqB,SACAtB,aAAcoB,IACdtB,iBACAG,2BACAe,uBAIaY,EA7QR,SAAsBvE,GAC5B,IAAMM,EAAUf,IAEfuF,EAOG9E,EAPH8E,MACAjC,EAMG7C,EANH6C,KACAoB,EAKGjE,EALHiE,OACAtB,EAIG3C,EAJH2C,aACAF,EAGGzC,EAHHyC,eACAG,EAEG5C,EAFH4C,yBACAe,EACG3D,EADH2D,kBAEKoB,EAAaC,MAAMnC,GAXU,EAaH3C,YAAe,GAbZ,mBAa5B+E,EAb4B,KAajBC,EAbiB,OAcShF,YAAe,GAdxB,mBAc5BiF,EAd4B,KAcVC,EAdU,OAeOlF,WAAe,MAftB,mBAe5BmF,EAf4B,KAebC,EAfa,OAgBepF,WAAe,IAhB9B,mBAgB5BqF,EAhB4B,KAgBTC,EAhBS,OAiBGtF,WAAe,gBAjBlB,mBAiB5BuF,EAjB4B,KAiBfC,EAjBe,KAmB7BC,EAAczF,SAAa,MAnBE,EAoBXA,WAAe,MApBJ,mBAoB5BD,EApB4B,KAoBvB2F,EApBuB,KAsBnC1F,aACC,WACC,IAAK2F,kBAAQlD,GAAe,CAC3B,IAAMmD,ECvB8B,SAACnD,EAAD,GAA0C,IAAzB5B,EAAwB,EAAxBA,MAAa8B,GAAW,EAAjBkD,KAAiB,EAAXlD,MAgBrE,OAf0BF,EACxBkB,QAAO,SAAAnB,GAAK,OAAIA,EAAMO,SAAWJ,EAAKK,MACtC8C,KAAI,SAACtD,GAAD,MAAY,CAChBQ,GAAIR,EAAMQ,GACV+C,MAAOvD,EAAMuD,MACbzC,MAAOJ,IAAOV,EAAMW,WAAWC,SAC/BG,IAAKL,IAAOV,EAAMwD,SAAS5C,SAC3B6C,QAAS,QACTC,QAAS,iBACTrF,QACAsF,cAAe,CACdC,UAAW,cACXrD,OAAQP,EAAMO,YDUCsD,CAAyB5D,EAAc,CACrD5B,MAAOkD,GAAUA,EAAOG,OACxB2B,KAAMN,EACN5C,SAED2C,EAAqBM,MAGvB,CAACnD,EAAc6C,EAAsBvB,EAAQwB,EAAa5C,IAG3D,IAAM2D,EAAQ,WACbpB,GAAgB,GAChBE,EAAiB,MACjBJ,GAAW,GACXuB,KAGKA,EAAY,kBAAMb,EAAS,OAyIjC,OACC,qCACE3F,EAAM,cAACF,EAAD,CAAUE,IAAKA,IAAU,qBAAKyG,MAAO,CAAEC,OAAQ,UACtD,cAAC,IAAD,CACCC,IAAKjB,EACLkB,QAAS,CAACC,IAAeC,IAAgBC,KACzCC,YAAY,eACZC,YAAarE,EAAKW,MAClB2D,aAAc,CAACpC,EAAYQ,GAC3B6B,UA1FqB,SAACC,GAAU,IAC1BvE,EAAkBuE,EAAlBvE,QAASiD,EAASsB,EAATtB,KACjB,IACC,GAAkB,iBAAdA,EAAKuB,KAAyB,CACjC,IACMC,EADM5B,EAAY6B,QAAQC,SACR1B,KAAK2B,SACzBH,EACHA,EAAYI,OAAO,IAAIC,KAAK9E,GAAU,gBAEtC+E,QAAQC,IAAI,oCAzDQ,SAACT,GAAU,IAC1BvE,EAAYuE,EAAZvE,QAGR,GAFA2D,IAEIxB,EACH,OAAO,EAGR,IAAM8C,EAASnF,EAAyB,CAACE,UAAQD,SACjD,GAAGkF,GAAUA,EAAO5G,QACnByE,EAASmC,OADV,CAKA,IACMR,EADM5B,EAAY6B,QAAQC,SACR1B,KAAK2B,SAE7B,IAAI7B,kBAAQ0B,GAAZ,CAIArC,GAAW,GAEX,IAAM7B,EAAYD,IAAON,GAASQ,SAC5B4C,EAAU9C,IAAON,GACrBkF,IAAInF,EAAKwD,cAAc4B,iBAAkB,UACzC3E,SAEFiE,EAAYW,SAAS,CACpBhF,GAAIiF,eACJlC,MAAOpD,EAAKoD,MACZzC,MAAOH,EACPI,IAAKyC,EACLkC,gBAAiBnE,GAAUA,EAAOC,KAClCmE,QAAQ,EACRC,WAAY,iBACZC,cAAe,kBAAMpD,GACrBqD,kBAAkB,EAClBC,qBAAqB,EACrBpC,cAAe,CACdC,UAAW,cACXrD,OAAQJ,EAAKK,MAGfkC,GAAgB,GAChBqB,MAeEiC,CAAgBrB,GAEhB,MAAOsB,GAERd,QAAQe,MAAM,cAAeD,EAAExH,WA2E9B0H,WAvEsB,SAACxB,GACzBZ,IAC2C,gBAAvCY,EAAK3E,MAAM2D,cAAcC,YAC5BhB,EAAiB+B,EAAK3E,OAEtB2E,EAAKyB,GAAGpC,MAAMqC,YAAc,UAmE3BC,SA/DsB,SAAC3B,GACzB,IAAM3E,EAAQ2E,EAAK3E,MACnB4C,EAAiB5C,IA8DfuG,UA3DwB,SAAC5B,GAAU,IAxFhBvE,EAyFboG,EAAa7B,EAAK3E,MAAlBwG,SAzFapG,EA0FHoG,EAzFH9F,IAAON,GAASqG,SAAS/F,MAAU,QA6FjDwC,EAAS,CACRjF,SAAU,QACVQ,QAAQ,0DAETkG,EAAK+B,WAPL3C,IACAnB,EAAiB+B,EAAK3E,SAwDrB2G,aAAc,YAAe,IAAZtD,EAAW,EAAXA,KAChBL,EAAeK,EAAKuB,SAGtB,eAACgC,EAAA,EAAD,CACCC,WAAS,EACTC,QAAQ,WACR5J,QAAS,EACTU,QAAS,CAAEiJ,UAAWjJ,EAAQqE,SAJ/B,UAMC,cAAC2E,EAAA,EAAD,CAAMG,MAAI,EAAV,SACC,cAACC,EAAA,EAAD,CACCC,QAAQ,YACRC,SAAU3E,EACVlE,MAAM,YACNE,QAAS6D,EAJV,qBASD,cAACwE,EAAA,EAAD,CAAMG,MAAI,EAAV,SACC,cAACC,EAAA,EAAD,CACCC,QAAQ,YACRC,UAAWvE,EACXtE,MAAM,YACNE,QAvEqB,WACzB0C,EAAkB0B,GAClBA,EAAcwE,SACdrD,KAgEG,sBASD,cAAC8C,EAAA,EAAD,CAAMG,MAAI,EAAV,SACC,cAACC,EAAA,EAAD,CACCC,QAAQ,YACRC,UAAWzE,EACXpE,MAAM,UACNE,QAvEiB,WACrB,GAAKoE,EAAL,CAGA,IAAM3C,EAAQ,CACbQ,GAAIiF,eACJlC,MAAOZ,EAAcY,MACrB6D,KAAMzE,EAAcyE,KACpB7G,OAAQoC,EAAcgB,cAAcpD,OACpCI,UAAWgC,EAAc7B,MACzB0C,QAASb,EAAc5B,KAExB4B,EAAcwE,SACdpH,EAAeC,GACf8D,IACAZ,EAAS,CACRjF,SAAU,UACVQ,QAAQ,gCAAD,OAAkCiC,IAAOV,EAAMW,WAAWC,OAChE,yBAiDC,qCEhPC/D,GAAYC,aAAW,SAACC,GAAD,MAAY,CACxCsK,MAAO,CACN5D,QAAS,OACT6D,WAAY,SACZC,eAAgB,UAEjBC,UAAW,CACVhJ,SAAU,QAEX6B,eAAgB,CACf7B,SAAU,OACVH,MAAO,QAERoJ,MAAO,CACN/B,gBAAiB3I,EAAM2K,QAAQC,WAAWF,MAC1CG,OAAQ,iBACRC,UAAW9K,EAAM+K,QAAQ,GACzB3F,QAASpF,EAAMG,QAAQ,EAAG,EAAG,GAC7BC,MAAO,aAIM,SAAS4K,GAAczK,GAAQ,IACrC6C,EAAsB7C,EAAtB6C,KAAM6H,EAAgB1K,EAAhB0K,YAERpK,EAAUf,KAH4B,EAIpBW,IAAMC,UAAS,GAJK,mBAIrCC,EAJqC,KAI/BC,EAJ+B,KAUtCsK,EAAc,WACnBtK,GAAQ,IAGT,OACC,qCACC,cAACQ,EAAA,EAAD,CACC+J,KAAK,MACL9J,aAAW,sBACXG,QAbgB,WAClBZ,GAAQ,IASP,SAKEqK,EACA,cAAC,IAAD,CAAoBnK,UAAWD,EAAQyC,iBAEvC,cAAC,IAAD,CAAsBxC,UAAWD,EAAQ4J,cAG1C9J,GACAyC,GACC,cAACgI,EAAA,EAAD,CACCC,kBAAgB,yBAChBC,mBAAiB,+BACjBxK,UAAWD,EAAQyJ,MACnB3J,KAAMA,EACN4K,QAASL,EACTM,kBAAmBC,IACnBC,cAAe,CACdC,QAAS,KARX,SAWC,qBAAK7K,UAAWD,EAAQ6J,MAAxB,SACC,cAAC,EAAD,CAActH,KAAMA,EAAMiC,MAAO6F,WCrEjC,ICkBDU,GAAOC,aAAW,SAAC7L,GAAD,MAAY,CACnCC,KAAM,CACL6L,KAAM,mBAENC,KAAM,CACJpD,gBAAiB3I,EAAM2K,QAAQqB,QAAQC,KACvC3K,MAAOtB,EAAM2K,QAAQuB,OAAOC,OAE9B9B,KAAM,CACJ5I,SAAU,OATDoK,CAWTO,KAEEtM,GAAYC,YAAW,CAC5BsM,MAAO,CACNC,SAAU,KAEXrM,KAAM,CACLsM,OAAQ,aACRD,SAAU,OA6EZ,IAUexH,MAVS,SAACvE,GAAW,IAAD,EACcsE,IAAxC9B,EAD0B,EAC1BA,SAAUuB,EADgB,EAChBA,gBAAiB5B,EADD,EACCA,SAEnC,MAAO,CACNC,MAAOI,IACPL,WACAQ,aAAcoB,OAIDQ,EAnFf,SAAoBvE,GAAQ,IACnBoC,EAAkCpC,EAAlCoC,MAAOD,EAA2BnC,EAA3BmC,SAAUQ,EAAiB3C,EAAjB2C,aACnBrC,EAAUf,KAwBhB,OAtBAW,aACC,WACK+L,iBAAO7J,ID9Cb,IAAI8J,SAAQ,SAACC,GAAD,OACXA,EAAQ,CACP,CACCjJ,GAAIiF,eACJlC,MAAO,kBACP6D,KAAM,kCACNzG,UAAWD,MACT4E,IAAI,EAAG,QACP1E,SACF4C,QAAS9C,MACP4E,IAAI,EAAG,QACP1E,SACF2E,iBAAkB,IAEnB,CACC/E,GAAIiF,eACJlC,MAAO,iBACP6D,KAAM,2BACNzG,UAAWD,MACT4E,IAAI,GAAI,QACR1E,SACF4C,QAAS9C,MACP4E,IAAI,GAAI,QACR1E,SACF2E,iBAAkB,KAEnB,CACC/E,GAAIiF,eACJlC,MAAO,wBACP6D,KAAM,YACNzG,UAAWD,MACT4E,IAAI,GAAI,QACR1E,SACF4C,QAAS9C,MACP4E,IAAI,GAAI,QACR1E,SACF2E,iBAAkB,UCWDmE,MAAK,SAACC,GACtB,IAAMtH,EHlDsB,SAAC3C,EAAD,GAAuB,IAAbrB,EAAY,EAAZA,MAsB1C,OArBmBqB,EACjByB,QAAO,SAACnB,GAAD,OAAWU,IAAOV,EAAMwD,SAASoG,QAAQlJ,MAAU,UAC1D4C,KAAI,SAACtD,GAAD,MAAY,CAChBQ,GAAIR,EAAMQ,GACV+C,MAAOvD,EAAMuD,MACbzC,MAAOJ,IAAOV,EAAMW,WAClBkJ,QAAQ,OACRjJ,SACFG,IAAKL,IAAOV,EAAMwD,SAChB8B,IAAI,EAAG,QACPuE,QAAQ,OACRjJ,SACF+E,QAAQ,EACRlC,QAAS,aACTC,QAAS,iBACTrF,QACAsF,cAAe,CACdC,UAAW,OACX2B,iBAAkBvF,EAAMuF,sBG+BJuE,CAAkBH,EAAK,CACzCtL,MAlCwB,YAoCzBoB,EAAS4C,QAIZ,CAAC3C,EAAOD,IAGTjC,aACC,WACM2F,kBAAQlD,IACZkF,QAAQC,IAAI,CAAEnF,mBAGhB,CAACA,IAGD,cAAC2G,EAAA,EAAD,CAAMhJ,QAAS,CAAEZ,KAAMY,EAAQZ,MAA/B,SACC,cAAC+M,EAAA,EAAD,CAAgBC,UAAWC,IAA3B,SACC,eAACC,EAAA,EAAD,CAAOrM,UAAWD,EAAQwL,MAAOhL,aAAW,eAA5C,UACC,cAAC+L,EAAA,EAAD,UACC,eAACC,EAAA,EAAD,WACC,cAACzB,GAAD,oBACA,cAACA,GAAD,CAAM0B,MAAM,SAAZ,wBACA,cAAC1B,GAAD,CAAM0B,MAAM,SAAZ,sBACA,cAAC1B,GAAD,CAAM0B,MAAM,SAAZ,yBACA,cAAC1B,GAAD,CAAM0B,MAAM,SAAZ,yBAGF,cAACC,EAAA,EAAD,UACE5K,GACAA,EAAM4D,KAAI,SAACnD,EAAMoK,GAChB,IAAMvC,EAAc/H,EAAaK,MAAK,SAAAN,GAAK,OAAIA,EAAMO,SAAWJ,EAAKK,MACrE,OACC,eAAC4J,EAAA,EAAD,WACC,cAACzB,GAAD,CAAMqB,UAAU,KAAKQ,MAAM,MAAM5M,QAAS,GAA1C,SACEuC,EAAKoD,QAEP,cAACoF,GAAD,CAAM0B,MAAM,SAAZ,SACE3J,IAAOP,EAAKW,OAAOF,OAAO,iBAE5B,cAAC+H,GAAD,CAAM0B,MAAM,SAAZ,SACE3J,IAAOP,EAAKY,KAAKH,OAAO,iBAE1B,cAAC+H,GAAD,CAAM0B,MAAM,SAAZ,SACErC,EACEtH,IAAOsH,EAAYrH,WAAWC,OAAO,qBACrC,QAGJ,cAAC+H,GAAD,CAAM0B,MAAM,SAAZ,SACC,cAAC,GAAD,CAAUlK,KAAMA,EAAM6H,YAAaA,QAjBrC,eAAuBuC,mBC5EjBE,OARf,WACC,OACC,cAAC9I,EAAD,UACC,cAAC,GAAD,OCIY+I,OARf,WACE,OACE,qBAAK7M,UAAU,MAAf,SACD,cAAC,GAAD,OCMY8M,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OAAQ,cAAC,GAAD,IAASC,SAASC,eAAe,SAOlDX,O","file":"static/js/main.4ed161cd.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Alert from '@material-ui/lab/Alert';\nimport IconButton from '@material-ui/core/IconButton';\nimport Collapse from '@material-ui/core/Collapse';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginBottom: theme.spacing(2),\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\nexport default function AlertMsg(props) {\n\tconst  { msg } = props\n  const [open, setOpen] = React.useState(true);\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Collapse in={open}>\n        <Alert\n\t\t\t\t\tseverity={ msg.severity }\n          action={\n            <IconButton\n              aria-label=\"close\"\n              color=\"inherit\"\n              size=\"small\"\n              onClick={() => {\n                setOpen(false);\n              }}\n            >\n              <CloseIcon fontSize=\"inherit\" />\n            </IconButton>\n          }\n        >\n\t\t\t\t\t{ msg.message }\n        </Alert>\n      </Collapse>\n    </div>\n  );\n}\n\n","import React, { createContext, useContext, useState, useMemo } from \"react\";\n\nconst useMemoizedStore = (reducer, initialState) => {\n  let [state, setState] = useState(initialState);\n  return useMemo(() => reducer({ state, setState }), [\n    state,\n    setState,\n    reducer\n  ]);\n};\n\nconst createStore = (reducer, initialState) => {\n  const StoreContext = createContext();\n\n  const StoreProvider = props => {\n    let store = useMemoizedStore(reducer, initialState);\n    return (\n      <StoreContext.Provider value={store}>\n        {props.children}\n      </StoreContext.Provider>\n    );\n  };\n\n  let useStore = () => {\n    return useContext(StoreContext);\n  };\n\n  return [StoreProvider, useStore];\n};\n\nexport default createStore;\n\n\n","import createStore from \"../../store/createStore\";\nimport produce from \"immer\";\nimport moment from \"moment\";\n\nconst BACKGROUND_YELLOW_COLOR = \"#FFA\";\nconst BACKGROUND_ORANGE_COLOR = \"#ff4e4e\";\nconst BACKGROUND_BLUE_COLOR = \"#025baa\";\n\nexport const MESSAGES = {\n\tERROR_OUTSIDE_TIME_SLOT: \"Cannot schedule an appointment outside time slot.\",\n\tERROR_APPOINTMENT_ALREADY_SCHEDULED: \"An appointment already booked for current Participant\",\n}\n\nexport const colors =  {\n\t\tblue: BACKGROUND_BLUE_COLOR,\n\t\tyellow: BACKGROUND_YELLOW_COLOR,\n\t\torange: BACKGROUND_ORANGE_COLOR,\n\t}\n\nconst initia_state = {\n\tslots: null,\n\tupcomingSlot: null,\n\tappointments: [],\n\tcolors\n};\n\nconst useReducer = ({ state, setState }) => {\n\tconst setSlots = (slots) => {\n\t\tsetState(\n\t\t\tproduce((draft) => {\n\t\t\t\tdraft.slots = slots;\n\t\t\t})\n\t\t);\n\t};\n\n\tconst addAppointment = (event) => {\n\t\tsetState(\n\t\t\tproduce((draft) => {\n\t\t\t\tdraft.appointments = [...draft.appointments, event]\n\t\t\t})\n\t\t);\n\t};\n\tconst removeAppointment = (event) => {\n\t\tsetState(\n\t\t\tproduce((draft) => {\n\t\t\t\tconst newAppointments = draft.appointments.filter(a => a.id !== event.id )\n\t\t\t\tdraft.appointments = newAppointments\n\t\t\t})\n\t\t);\n\t};\n\n\tconst addAppointmentValidation = ({slot, dateStr}) => {\n\t\tif (!slot) {\n\t\t\treturn({ severity: \"warning\", message: \"Time slot is not defined\" });\n\t\t}\n\n\n\t\tconst hasAppointment =\n\t\t\tstate.appointments && state.appointments.find((event) => event.slotId === slot.id);\n\n\t\tif (hasAppointment) {\n\t\t\tconst date = moment(hasAppointment.startTime).format(\"DD MMM YYYY\");\n\t\t\tconst startTime = moment(hasAppointment.startTime).format(\"HH:mm\");\n\t\t\treturn ({\n\t\t\t\tseverity: \"info\",\n\t\t\t\tmessage: `${MESSAGES.ERROR_APPOINTMENT_ALREADY_SCHEDULED} on ${date} at ${startTime}`,\n\t\t\t});\n\t\t}\n\t\tconst withinTimeSlot = moment(dateStr).isBetween(\n\t\t\tmoment(slot.start),\n\t\t\tmoment(slot.end),\n\t\t\tundefined,\n\t\t\t\"[]\"\n\t\t);\n\n\t\tif (!withinTimeSlot) {\n\t\t\treturn({\n\t\t\t\tseverity: \"warning\",\n\t\t\t\tmessage: MESSAGES.ERROR_OUTSIDE_TIME_SLOT,\n\t\t\t});\n\t\t}\n\t\treturn;\n\t}\n\tconst getAppointments = () => state.appointments\n\tconst getSlots = () => state.slots;\n\tconst getUpcomingSlot = () => state.slots[0];\n\n\treturn {\n\t\tsetSlots,\n\t\tgetUpcomingSlot,\n\t\tgetSlots,\n\t\taddAppointment,\n\t\taddAppointmentValidation,\n\t\tremoveAppointment,\n\t\tgetAppointments,\n\t};\n};\n\nlet [AppointmentsStoreProvider, useAppointmentsStore] = createStore(\n\tuseReducer,\n\tinitia_state\n);\n\nexport { AppointmentsStoreProvider, useAppointmentsStore };\n","import React from \"react\";\n\nconst withHooks = mapHooksToProps => WrappedComponent => {\n  return props => {\n    let hookProps = mapHooksToProps(props);\n    return <WrappedComponent {...hookProps} {...props} />;\n  };\n};\n\nexport default withHooks;\n\n","import * as React from \"react\";\nimport PropTypes from \"prop-types\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport moment from \"moment\";\nimport { isEmpty } from \"lodash\";\nimport { v4 as uuid } from \"uuid\";\nimport AlertMsg from \"./AlertMsg\";\nimport { useAppointmentsStore } from \"./store\";\nimport { prepareAppointmentEvents } from \"./utils/prepareEvents\";\nimport withHooks from \"../../store/withHooks\";\n\nconst useStyles = makeStyles((theme) => ({\n\tactions: {\n\t\tflexGrow: 1,\n\t\tpadding: 20,\n\t},\n}));\n\nexport function Appointments(props) {\n\tconst classes = useStyles();\n\tconst {\n\t\tclose,\n\t\tslot,\n\t\tcolors,\n\t\tappointments,\n\t\taddAppointment,\n\t\taddAppointmentValidation,\n\t\tremoveAppointment,\n\t} = props;\n\tconst slotEvents = Array(slot);\n\n\tconst [isPending, setPending] = React.useState(false);\n\tconst [showConfirmation, setConfirmation] = React.useState(false);\n\tconst [selectedEvent, setSelectedEvent] = React.useState(null);\n\tconst [appointmentEvents, setAppointmentEvents] = React.useState([]);\n\tconst [currentView, setCurrentView] = React.useState(\"dayGridMonth\");\n\n\tconst calendarRef = React.useRef(null);\n\tconst [msg, setAlert] = React.useState(null);\n\n\tReact.useEffect(\n\t\t() => {\n\t\t\tif (!isEmpty(appointments)) {\n\t\t\t\tconst events = prepareAppointmentEvents(appointments, {\n\t\t\t\t\tcolor: colors && colors.orange,\n\t\t\t\t\tview: currentView,\n\t\t\t\t\tslot,\n\t\t\t\t});\n\t\t\t\tsetAppointmentEvents(events);\n\t\t\t}\n\t\t},\n\t\t[appointments, setAppointmentEvents, colors, currentView, slot]\n\t);\n\n\tconst reset = () => {\n\t\tsetConfirmation(false);\n\t\tsetSelectedEvent(null);\n\t\tsetPending(false);\n\t\thideAlert();\n\t};\n\n\tconst hideAlert = () => setAlert(null);\n\n\tconst isInPastDate = (dateStr) => {\n\t\tconst result = moment(dateStr).isBefore(moment(), \"day\");\n\t\treturn result;\n\t};\n\n\n\tconst handleTimeClick = (info) => {\n\t\tconst { dateStr } = info;\n\t\thideAlert();\n\t\t\n\t\tif (isPending) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst errors = addAppointmentValidation({dateStr,slot})\n\t\tif(errors && errors.message){\n\t\t\tsetAlert(errors);\n\t\t\treturn\n\t\t}\n\n\t\tconst api = calendarRef.current.getApi();\n\t\tconst calendarApi = api.view.calendar;\n\n\t\tif (isEmpty(calendarApi)) {\n\t\t\treturn;\n\t\t}\n\n\t\tsetPending(true);\n\n\t\tconst startTime = moment(dateStr).format();\n\t\tconst endTime = moment(dateStr)\n\t\t\t.add(slot.extendedProps.slotTimeDuration, \"minute\")\n\t\t\t.format();\n\n\t\tcalendarApi.addEvent({\n\t\t\tid: uuid(),\n\t\t\ttitle: slot.title,\n\t\t\tstart: startTime,\n\t\t\tend: endTime,\n\t\t\tbackgroundColor: colors && colors.blue,\n\t\t\tallDay: false,\n\t\t\tconstraint: \"availableSlots\",\n\t\t\tstartEditable: () => showConfirmation,\n\t\t\tdurationEditable: false,\n\t\t\tresizeableFromStart: false,\n\t\t\textendedProps: {\n\t\t\t\teventType: \"APPOINTMENT\",\n\t\t\t\tslotId: slot.id,\n\t\t\t},\n\t\t});\n\t\tsetConfirmation(true);\n\t\thideAlert();\n\t};\n\n\tconst handleDateClick = (info) => {\n\t\tconst { dateStr, view } = info;\n\t\ttry {\n\t\t\tif (view.type === \"dayGridMonth\") {\n\t\t\t\tconst api = calendarRef.current.getApi();\n\t\t\t\tconst calendarApi = api.view.calendar;\n\t\t\t\tif (calendarApi) {\n\t\t\t\t\tcalendarApi.zoomTo(new Date(dateStr), \"timeGridWeek\");\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(\"Cannot get the calendar API\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\thandleTimeClick(info);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t/* eslint-disable no-console */\n\t\t\tconsole.error(\"catch error\", e.message);\n\t\t}\n\t};\n\n\tconst handleEventClick = (info) => {\n\t\thideAlert();\n\t\tif (info.event.extendedProps.eventType === \"APPOINTMENT\") {\n\t\t\tsetSelectedEvent(info.event);\n\t\t\t/* eslint-disable no-param-reassign */\n\t\t\tinfo.el.style.borderColor = \"black\";\n\t\t}\n\t};\n\n\tconst handleEventAdded = (info) => {\n\t\tconst event = info.event;\n\t\tsetSelectedEvent(event);\n\t};\n\n\tconst handelEventDropped = (info) => {\n\t\tconst { startStr } = info.event;\n\t\tif (!isInPastDate(startStr)) {\n\t\t\thideAlert();\n\t\t\tsetSelectedEvent(info.event);\n\t\t} else {\n\t\t\tsetAlert({\n\t\t\t\tseverity: \"alert\",\n\t\t\t\tmessage: `Cannot schedule an appointment outside the time slot.`,\n\t\t\t});\n\t\t\tinfo.revert();\n\t\t}\n\t};\n\n\tconst handleRemoveEvent = () => {\n\t\tremoveAppointment(selectedEvent);\n\t\tselectedEvent.remove();\n\t\treset();\n\t\t// setPending(false);\n\t\t// setConfirmation(false);\n\t\t// setSelectedEvent(null);\n\t\t// hideAlert();\n\t};\n\n\tconst handleConfirm = () => {\n\t\tif (!selectedEvent) {\n\t\t\treturn;\n\t\t}\n\t\tconst event = {\n\t\t\tid: uuid(),\n\t\t\ttitle: selectedEvent.title,\n\t\t\tbody: selectedEvent.body,\n\t\t\tslotId: selectedEvent.extendedProps.slotId,\n\t\t\tstartTime: selectedEvent.start,\n\t\t\tendTime: selectedEvent.end,\n\t\t};\n\t\tselectedEvent.remove();\n\t\taddAppointment(event);\n\t\treset();\n\t\tsetAlert({\n\t\t\tseverity: \"success\",\n\t\t\tmessage: `Appointment was scheduled at ${moment(event.startTime).format(\n\t\t\t\t\"D MMM YYYY HH:mm\"\n\t\t\t)}`,\n\t\t});\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t{msg ? <AlertMsg msg={msg} /> : <div style={{ height: \"65px\" }} />}\n\t\t\t<FullCalendar\n\t\t\t\tref={calendarRef}\n\t\t\t\tplugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n\t\t\t\tinitialView=\"dayGridMonth\"\n\t\t\t\tinitialDate={slot.start}\n\t\t\t\teventSources={[slotEvents, appointmentEvents]}\n\t\t\t\tdateClick={handleDateClick}\n\t\t\t\teventClick={handleEventClick}\n\t\t\t\teventAdd={handleEventAdded}\n\t\t\t\teventDrop={handelEventDropped}\n\t\t\t\tviewDidMount={({ view }) => {\n\t\t\t\t\tsetCurrentView(view.type);\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<Grid\n\t\t\t\tcontainer\n\t\t\t\tjustify=\"flex-end\"\n\t\t\t\tspacing={5}\n\t\t\t\tclasses={{ container: classes.actions }}\n\t\t\t>\n\t\t\t\t<Grid item>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\tdisabled={isPending}\n\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\tonClick={close}\n\t\t\t\t\t>\n\t\t\t\t\t\tClose\n\t\t\t\t\t</Button>\n\t\t\t\t</Grid>\n\t\t\t\t<Grid item>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\tdisabled={!selectedEvent}\n\t\t\t\t\t\tcolor=\"secondary\"\n\t\t\t\t\t\tonClick={handleRemoveEvent}\n\t\t\t\t\t>\n\t\t\t\t\t\tRemove\n\t\t\t\t\t</Button>\n\t\t\t\t</Grid>\n\t\t\t\t<Grid item>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\tdisabled={!showConfirmation}\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tonClick={handleConfirm}\n\t\t\t\t\t>\n\t\t\t\t\t\tConfirm Save\n\t\t\t\t\t</Button>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t</>\n\t);\n}\n\nAppointments.propTypes = {\n\tslot: PropTypes.shape({\n\t\tid: PropTypes.string.isRequired,\n\t\tstart: PropTypes.string.isRequired,\n\t\tend: PropTypes.string.isRequired,\n\t\ttitle: PropTypes.string.isRequired,\n\t\textendedProps: PropTypes.shape({\n\t\t\tslotTimeDuration: PropTypes.number.isRequired,\n\t\t\teventType: PropTypes.string.isRequired,\n\t\t}).isRequired,\n\t}).isRequired,\n};\n\nconst useHooksToProps = (props) => {\n\tconst {\n\t\tcolors,\n\t\tgetAppointments,\n\t\tremoveAppointment,\n\t\taddAppointment,\n\t\taddAppointmentValidation,\n\t} = useAppointmentsStore();\n\n\treturn {\n\t\tcolors,\n\t\tappointments: getAppointments(),\n\t\taddAppointment,\n\t\taddAppointmentValidation,\n\t\tremoveAppointment,\n\t};\n};\n\nexport default withHooks(useHooksToProps)(Appointments);\n","import moment from \"moment\";\n\nexport const prepareSlotEvents = (slots, { color }) => {\n\tconst slotEvents = slots\n\t\t.filter((event) => moment(event.endTime).isAfter(moment(), \"day\"))\n\t\t.map((event) => ({\n\t\t\tid: event.id,\n\t\t\ttitle: event.title,\n\t\t\tstart: moment(event.startTime)\n\t\t\t\t.startOf(\"day\")\n\t\t\t\t.format(),\n\t\t\tend: moment(event.endTime)\n\t\t\t\t.add(1, \"days\")\n\t\t\t\t.startOf(\"day\")\n\t\t\t\t.format(),\n\t\t\tallDay: true,\n\t\t\tdisplay: \"background\",\n\t\t\tgroupId: \"availableSlots\",\n\t\t\tcolor,\n\t\t\textendedProps: {\n\t\t\t\teventType: \"SLOT\",\n\t\t\t\tslotTimeDuration: event.slotTimeDuration,\n\t\t\t},\n\t\t}));\n\treturn slotEvents;\n};\n\nexport const prepareAppointmentEvents = (appointments, { color, view, slot }) => {\n\tconst appointmentEvents = appointments\n\t\t.filter(event => event.slotId === slot.id)\n\t\t.map((event) => ({\n\t\t\tid: event.id,\n\t\t\ttitle: event.title,\n\t\t\tstart: moment(event.startTime).format(),\n\t\t\tend: moment(event.endTime).format(),\n\t\t\tdisplay: 'block', //view === 'dayGridMonth' ? \"background\" : \"block\",\n\t\t\tgroupId: \"availableSlots\",\n\t\t\tcolor,\n\t\t\textendedProps: {\n\t\t\t\teventType: \"APPOINTMENT\",\n\t\t\t\tslotId: event.slotId,\n\t\t\t},\n\t\t}));\n\treturn appointmentEvents;\n};\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ScheduleOutlinedIcon from \"@material-ui/icons/ScheduleOutlined\";\nimport EventAvailableIcon from \"@material-ui/icons/EventAvailable\";\nimport Appointments from \"./Appointments\";\n\nconst useStyles = makeStyles((theme) => ({\n\tmodal: {\n\t\tdisplay: \"flex\",\n\t\talignItems: \"center\",\n\t\tjustifyContent: \"center\",\n\t},\n\tscheduled: {\n\t\tfontSize: \"32px\",\n\t},\n\thasAppointment: {\n\t\tfontSize: \"32px\",\n\t\tcolor: \"#AEA\",\n\t},\n\tpaper: {\n\t\tbackgroundColor: theme.palette.background.paper,\n\t\tborder: \"2px solid #000\",\n\t\tboxShadow: theme.shadows[5],\n\t\tpadding: theme.spacing(2, 4, 3),\n\t\twidth: \"700px\",\n\t},\n}));\n\nexport default function ModalCalendar(props) {\n\tconst { slot, appointment } = props;\n\n\tconst classes = useStyles();\n\tconst [open, setOpen] = React.useState(false);\n\n\tconst handleOpen = () => {\n\t\tsetOpen(true);\n\t};\n\n\tconst handleClose = () => {\n\t\tsetOpen(false);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<IconButton\n\t\t\t\tedge=\"end\"\n\t\t\t\taria-label=\"Make an appointment\"\n\t\t\t\tonClick={handleOpen}\n\t\t\t>\n\t\t\t\t{appointment ? (\n\t\t\t\t\t<EventAvailableIcon className={classes.hasAppointment} />\n\t\t\t\t) : (\n\t\t\t\t\t<ScheduleOutlinedIcon className={classes.scheduled} />\n\t\t\t\t)}\n\t\t\t</IconButton>\n\t\t\t{open &&\n\t\t\t\tslot && (\n\t\t\t\t\t<Modal\n\t\t\t\t\t\taria-labelledby=\"transition-modal-title\"\n\t\t\t\t\t\taria-describedby=\"transition-modal-description\"\n\t\t\t\t\t\tclassName={classes.modal}\n\t\t\t\t\t\topen={open}\n\t\t\t\t\t\tonClose={handleClose}\n\t\t\t\t\t\tBackdropComponent={Backdrop}\n\t\t\t\t\t\tBackdropProps={{\n\t\t\t\t\t\t\ttimeout: 500,\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div className={classes.paper}>\n\t\t\t\t\t\t\t<Appointments slot={slot} close={handleClose} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Modal>\n\t\t\t\t)}\n\t\t</>\n\t);\n}\n","import moment from 'moment'\nimport { v4 as uuid } from \"uuid\";\n\nexport const fetchSlots = () =>\n\tnew Promise((resolve) =>\n\t\tresolve([\n\t\t\t{\n\t\t\t\tid: uuid(),\n\t\t\t\ttitle: \"Medical Checkup\",\n\t\t\t\tbody: \"Routine annual medical checkup.\",\n\t\t\t\tstartTime: moment()\n\t\t\t\t\t.add(2, \"days\")\n\t\t\t\t\t.format(),\n\t\t\t\tendTime: moment()\n\t\t\t\t\t.add(5, \"days\")\n\t\t\t\t\t.format(),\n\t\t\t\tslotTimeDuration: 90,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: uuid(),\n\t\t\t\ttitle: \"Vaccine Trials\",\n\t\t\t\tbody: \"Covid-19 clinical trials\",\n\t\t\t\tstartTime: moment()\n\t\t\t\t\t.add(12, \"days\")\n\t\t\t\t\t.format(),\n\t\t\t\tendTime: moment()\n\t\t\t\t\t.add(17, \"days\")\n\t\t\t\t\t.format(),\n\t\t\t\tslotTimeDuration: 120,\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: uuid(),\n\t\t\t\ttitle: \"Follow-up Examination\",\n\t\t\t\tbody: \"follow up\",\n\t\t\t\tstartTime: moment()\n\t\t\t\t\t.add(35, \"days\")\n\t\t\t\t\t.format(),\n\t\t\t\tendTime: moment()\n\t\t\t\t\t.add(38, \"days\")\n\t\t\t\t\t.format(),\n\t\t\t\tslotTimeDuration: 120,\n\t\t\t},\n\t\t])\n\t);\n","import * as React from \"react\";\nimport { isNull, isEmpty } from \"lodash\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport moment from \"moment\";\nimport Calendar from \"./Calendar\";\n\nimport { prepareSlotEvents } from \"./utils/prepareEvents\";\nimport { useAppointmentsStore } from \"./store\";\nimport withHooks from \"../../store/withHooks\";\nimport * as Api from \"./Api\";\n\nconst BACKGROUND_SLOT_COLOR = \"#8fdf82\";\n\nconst Cell = withStyles((theme) => ({\n\troot: {\n\t\tfont: '400 18px Roboto',\n\t},\n  head: {\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 17,\n  },\n}))(TableCell);\n\nconst useStyles = makeStyles({\n\ttable: {\n\t\tmaxWidth: 800,\n\t},\n\troot: {\n\t\tmargin: \"100px auto\",\n\t\tmaxWidth: 800,\n\t},\n});\n\nfunction SlotsTable(props) {\n\tconst { slots, setSlots, appointments } = props;\n\tconst classes = useStyles();\n\n\tReact.useEffect(\n\t\t() => {\n\t\t\tif (isNull(slots)) {\n\t\t\t\tApi.fetchSlots().then((res) => {\n\t\t\t\t\tconst slotEvents = prepareSlotEvents(res, {\n\t\t\t\t\t\tcolor: BACKGROUND_SLOT_COLOR,\n\t\t\t\t\t});\n\t\t\t\t\tsetSlots(slotEvents);\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t[slots, setSlots]\n\t);\n\n\tReact.useEffect(\n\t\t() => {\n\t\t\tif (!isEmpty(appointments)) {\n\t\t\t\tconsole.log({ appointments });\n\t\t\t}\n\t\t},\n\t\t[appointments]\n\t);\n\treturn (\n\t\t<Grid classes={{ root: classes.root }}>\n\t\t\t<TableContainer component={Paper}>\n\t\t\t\t<Table className={classes.table} aria-label=\"simple table\">\n\t\t\t\t\t<TableHead>\n\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t<Cell>Title</Cell>\n\t\t\t\t\t\t\t<Cell align=\"center\">Start Time</Cell>\n\t\t\t\t\t\t\t<Cell align=\"center\">End Time</Cell>\n\t\t\t\t\t\t\t<Cell align=\"center\">Appointment</Cell>\n\t\t\t\t\t\t\t<Cell align=\"center\">Status</Cell>\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t</TableHead>\n\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t{slots &&\n\t\t\t\t\t\t\tslots.map((slot, index) => {\n\t\t\t\t\t\t\t\tconst appointment = appointments.find(event => event.slotId === slot.id)\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<TableRow key={`slot-${index}`}>\n\t\t\t\t\t\t\t\t\t\t<Cell component=\"th\" scope=\"row\" classes={{ }}>\n\t\t\t\t\t\t\t\t\t\t\t{slot.title}\n\t\t\t\t\t\t\t\t\t\t</Cell>\n\t\t\t\t\t\t\t\t\t\t<Cell align=\"center\">\n\t\t\t\t\t\t\t\t\t\t\t{moment(slot.start).format(\"DD MMM YYYY\")}\n\t\t\t\t\t\t\t\t\t\t</Cell>\n\t\t\t\t\t\t\t\t\t\t<Cell align=\"center\">\n\t\t\t\t\t\t\t\t\t\t\t{moment(slot.end).format(\"DD MMM YYYY\")}\n\t\t\t\t\t\t\t\t\t\t</Cell>\n\t\t\t\t\t\t\t\t\t\t<Cell align=\"center\">\n\t\t\t\t\t\t\t\t\t\t\t{appointment \n\t\t\t\t\t\t\t\t\t\t\t\t? moment(appointment.startTime).format(\"DD MMM YYYY HH:mm\")\n\t\t\t\t\t\t\t\t\t\t\t\t: \"---\"\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t</Cell>\n\t\t\t\t\t\t\t\t\t\t<Cell align=\"center\">\n\t\t\t\t\t\t\t\t\t\t\t<Calendar slot={slot} appointment={appointment}/>\n\t\t\t\t\t\t\t\t\t\t</Cell>\n\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t</TableBody>\n\t\t\t\t</Table>\n\t\t\t</TableContainer>\n\t\t</Grid>\n\t);\n}\n\nconst useHooksToProps = (props) => {\n\tconst { getSlots, getAppointments, setSlots } = useAppointmentsStore();\n\n\treturn {\n\t\tslots: getSlots(),\n\t\tsetSlots,\n\t\tappointments: getAppointments(),\n\t};\n};\n\nexport default withHooks(useHooksToProps)(SlotsTable);\n","import * as React from \"react\";\nimport SlotsTable from \"./SlotsTable\";\nimport { AppointmentsStoreProvider } from \"./store\";\n\nfunction AppointmentsContainer() {\n\treturn (\n\t\t<AppointmentsStoreProvider>\n\t\t\t<SlotsTable />\n\t\t</AppointmentsStoreProvider>\n\t);\n}\n\nexport default AppointmentsContainer;\n","import * as React from 'react'\nimport Appointments from './components/Appointments'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\t\t\t<Appointments/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render( <App />, document.getElementById('root'));\n\n  // <React.StrictMode>\n  // </React.StrictMode>\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}